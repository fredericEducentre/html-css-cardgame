{
  "cards": [
    {
      "connaissance": "La structure de base d'un document HTML comprend les balises essentielles telles que <html>, <head>, et <body>. La balise <html> englobe tout le contenu de la page. La section <head> contient des informations méta, le titre de la page et les liens vers des ressources externes comme des fichiers CSS. La section <body> contient le contenu visible de la page, comme les titres, paragraphes et images.",
      "example": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Ma première page</title>\n</head>\n<body>\n  <h1>Bienvenue</h1>\n  <p>Ceci est un paragraphe dans ma page HTML.</p>\n</body>\n</html>",
      "defi": "Crée la structure de base d'un document HTML et expliquer chaque balises."
    },
    {
      "connaissance": "Les balises HTML essentielles incluent <h1> à <h6> pour les titres, <p> pour les paragraphes, <a> pour les liens, <img> pour les images, <div> pour les conteneurs et <span> pour le style en ligne. Ces balises permettent de structurer le contenu de manière lisible et logique.",
      "example": "<h1>Titre principal</h1>\n<p>Ceci est un paragraphe avec un <a href='https://www.example.com'>lien</a>.</p>\n<img src='image.jpg' alt='Description de l'image'>",
      "defi": "Crée une page HTML incluant un titre, trois paragraphes, deux images et plusieurs liens vers différents sites web."
    },
    {
      "connaissance": "Le CSS permet de styliser les éléments HTML en utilisant des règles qui définissent l'apparence visuelle des pages web. On peut définir les styles dans un fichier externe, dans la section <style> du document ou en ligne dans les balises HTML.",
      "example": "body {\n  font-family: Arial, sans-serif;\n}\nh1 {\n text-align: center;\n}",
      "defi": "Ajoute un fichier CSS externe à ta page HTML et applique des styles pour changer la couleur du texte et l'arrière-plan de la page."
    },
    {
      "connaissance": "Les sélecteurs CSS permettent de cibler des éléments HTML spécifiques pour leur appliquer des styles. Parmi eux, on retrouve les sélecteurs de type (ex: p, h1), les sélecteurs de classe (.class), d'ID (#id) et les sélecteurs combinés.",
      "example": ".contenu {\n  color: blue;\n  font-size: 18px;\n}\n#titre-principal {\n  font-weight: bold;\n}",
      "defi": "Crée une page HTML avec plusieurs éléments stylisés en utilisant des classes et des identifiants pour appliquer différentes couleurs et polices."
    },
    {
      "connaissance": "Les propriétés CSS de mise en page telles que flexbox et grid permettent d'organiser efficacement le contenu sur une page web, en facilitant l'alignement et la distribution des éléments.",
      "example": ".container {\n  display: flex;\n  justify-content: end;\n  align-items: center;\n}\n.item {\n  width: 100px;\n  height: 100px;\n  background-color: lightblue;\n}",
      "defi": "Crée une page avec une mise en page utilisant Flexbox pour centrer un bloc de contenu au milieu de la page."
    },
    {
      "connaissance": "L'optimisation SEO de base repose sur l'utilisation de balises HTML importantes comme <title>, <meta description>, et des balises d'en-tête (<h1> à <h6>) pour structurer correctement le contenu.",
      "example": "<head>\n  <title>Page optimisée</title>\n  <meta name='description' content='Ceci est une page optimisée pour les moteurs de recherche'>\n</head>",
      "defi": "Optimise ta page HTML en ajoutant des balises SEO telles qu'un titre pertinent, une description et une structure d'en-têtes logique."
    },
    {
      "connaissance": "Les listes HTML permettent d'organiser le contenu sous forme d'éléments ordonnés ou non ordonnés. La balise <ul> crée une liste non ordonnée, tandis que <ol> crée une liste ordonnée. Chaque élément de liste est défini avec la balise <li>.",
      "example": "<ul>\n  <li>Arthur</li>\n  <li>David</li>\n  <li>Julien</li>\n</ul>\n\n<ol>\n  <li>Tâches à réaliser</li>\n  <li>Prospecter des clients</li>\n  <li>Vendre notre produit phare</li>\n</ol>",
      "defi": "Crée une page HTML contenant une liste ordonnée des étapes de préparation d'une recette et une liste non ordonnée des ingrédients nécessaires."
    },
    {
      "connaissance": "Les attributs HTML permettent d'ajouter des informations supplémentaires aux éléments, comme les attributs src et alt pour les images, ou href pour les liens. Ils améliorent l'accessibilité et le référencement.",
      "example": "<a href='https://www.exemple.com' target='_blank'>Visitez notre site</a>\n<img src='image.jpg' alt='Une belle image' width='300' height='200'>",
      "defi": "Crée une page HTML contenant des liens avec différents attributs, et des images accompagnées de descriptions textuelles accessibles."
    },
    {
      "connaissance": "Les formulaires HTML permettent de recueillir des informations auprès des utilisateurs à l'aide d'éléments comme <input>, <textarea>, et <select>. Les attributs comme placeholder, required, et type aident à améliorer l'expérience utilisateur.",
      "example": "<form action='submit.php' method='POST'>\n  <label for='name'>Nom :</label>\n  <input type='text' id='name' name='name' placeholder='Entrez votre nom' required>\n  <input type='submit' value='Envoyer'>\n</form>",
      "defi": "Crée un formulaire d'inscription contenant des champs pour le nom, l'email et le mot de passe avec validation HTML."
    },
    {
      "connaissance": "Les sélecteurs CSS avancés permettent de cibler des éléments spécifiques dans une page, par exemple avec des pseudo-classes comme :hover, :nth-child(), et des sélecteurs d'attributs.",
      "example": "button:hover {\n  border-color: blue;\n}\nli:nth-child(even) {\n  background-color: #f2f2f2;\n}",
      "defi": "Crée une page avec une liste où les éléments impairs ont un style différent, et un formulaire dont les champs changent de couleur lorsqu'ils sont sélectionnés."
    },
    {
      "connaissance": "Le modèle de boîte CSS est un concept clé qui définit comment les marges, les bordures, le padding et le contenu interagissent pour contrôler l'espace occupé par les éléments sur une page.",
      "example": "div {\n  width: 300px;\n  padding: 20px;\n  border: 5px solid black;\n  margin: 10px;\n}",
      "defi": "Crée une page HTML avec des boîtes stylisées en utilisant différentes valeurs de marge, padding et bordure pour comprendre leur interaction."
    },
    {
      "connaissance": "Les media queries CSS permettent d'adapter le style d'une page en fonction de la taille de l'écran, rendant le site responsive sur différents appareils.",
      "example": "@media (min-width: 900px) {\n  body {\n    background-color: lightgray;\n  }\n}",
      "defi": "Crée une page HTML avec un style qui change lorsque la largeur de l'écran est inférieure à 600 pixels."
    },
    {
      "connaissance": "L'utilisation des balises méta dans l'en-tête d'un document HTML est essentielle pour améliorer le SEO. La balise <meta> permet de spécifier la description, les mots-clés et l'encodage du document.",
      "example": "<head>\n  <meta charset='UTF-8'>\n  <meta name='description' content='Une page web sur les astuces HTML'>\n  <meta name='keywords' content='HTML, CSS, SEO'>\n</head>",
      "defi": "Ajoute des balises méta à une page existante pour améliorer son référencement et son accessibilité."
    },
    {
      "connaissance": "Flexbox est un modèle de disposition CSS qui facilite l'alignement des éléments en ligne ou en colonne et permet une répartition flexible de l'espace disponible.",
      "example": ".container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.item {\n  width: 100px;\n  height: 50px;\n  background: lightblue;\n}",
      "defi": "Crée une mise en page avec Flexbox pour aligner trois blocs horizontalement avec un espacement égal entre eux."
    },
    {
      "connaissance": "L'élément <footer> en HTML est utilisé pour représenter la section de bas de page d'un document ou d'une section, contenant généralement des informations telles que le copyright, des liens et des crédits.",
      "example": "<footer>\n  <p>&copy; 2024 Mon Site Web</p>\n  <nav>\n    <ul>\n      <li><p>Ceci est mon footer</p></li>\n   </ul>\n  </nav>\n</footer>",
      "defi": "Ajoute un pied de page structuré à une page web existante en utilisant la balise <footer> pour inclure des liens de navigation et des informations de copyright."
    },
    {
      "connaissance": "Les attributs alt et title des images en HTML sont cruciaux pour l'accessibilité et le SEO. L'attribut alt fournit une description textuelle de l'image, tandis que title affiche une info-bulle au survol.",
      "example": "<img src='chat.jpg' alt='Un chat mignon regardant la caméra' title='Chat curieux'>",
      "defi": "Intègre plusieurs images dans une page HTML en ajoutant des descriptions appropriées avec les attributs alt et title."
    },
    {
      "connaissance": "Les tableaux en HTML permettent d'organiser les données sous forme de grilles à l'aide des balises <table>, <tr> pour les lignes, <td> pour les cellules, et <th> pour les en-têtes.",
      "example": "<table border='1'>\n  <tr>\n    <th>Nom</th>\n    <th>Âge</th>\n  </tr>\n  <tr>\n    <td>Alice</td>\n    <td>25</td>\n  </tr>\n  <tr>\n    <td>Bob</td>\n    <td>30</td>\n  </tr>\n</table>",
      "defi": "Crée un tableau HTML affichant une liste de produits avec des colonnes pour le nom, le prix et la quantité en stock."
    },
    {
      "connaissance": "Les couleurs en CSS peuvent être spécifiées en utilisant des noms de couleurs, des valeurs hexadécimales, RGB ou HSL. Cela permet de personnaliser l'apparence des éléments.",
      "example": "body {\n  background-color: #f0f0f0;\n  color: rgb(34, 34, 34);\n}\nh1 {\n  color: hsl(240, 100%, 50%);\n}",
      "defi": "Applique différentes méthodes de définition de couleurs CSS à une page web, y compris les couleurs nommées, hexadécimales et RGB."
    },
    {
      "connaissance": "Les polices de caractères en CSS peuvent être définies à l'aide de la propriété 'font-family'. On peut utiliser des polices génériques (serif, sans-serif) ou importer des polices via Google Fonts.",
      "example": "body {\n  font-family: 'Arial', sans-serif;\n}\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');",
      "defi": "Personnalise la typographie d'une page web en utilisant une police Google Fonts et applique différents styles de texte (gras, italique)."
    },
    {
      "connaissance": "Les unités de mesure en CSS, comme px (pixels), em, rem, % et vh/vw, permettent de définir des tailles adaptées en fonction du contexte et de la taille de l'écran.",
      "example": "p {\n  font-size: 16px;\n  margin: 2em;\n}\ndiv {\n  width: 50%;\n  height: 100vh;\n}",
      "defi": "Crée une mise en page en utilisant différentes unités de mesure pour rendre le design plus flexible et responsive."
    },
    {
      "connaissance": "La propriété 'position' en CSS permet de contrôler le positionnement des éléments sur la page en utilisant les valeurs static, relative, absolute et fixed.",
      "example": ".boite {\n  position: absolute;\n  top: 50px;\n  left: 100px;\n}",
      "defi": "Crée une page avec un élément fixé en haut de l'écran et un autre positionné absolument par rapport à son conteneur."
    },
    {
      "connaissance": "Les transitions CSS permettent d'animer des changements de propriétés (comme la couleur ou la taille) de manière fluide sur une durée définie.",
      "example": "button {\n  background-color: blue;\n  transition: background-color 0.5s ease-in-out;\n}\nbutton:hover {\n  background-color: red;\n}",
      "defi": "Ajoute un effet de transition sur un bouton qui change de couleur lorsqu'on le survole."
    },
    {
      "connaissance": "Le responsive design peut être amélioré avec le système de grille CSS, qui permet de créer des mises en page flexibles et complexes facilement.",
      "example": ".grid-container {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  gap: 20px;\n}\n.grid-item {\n  background: lightgray;\n  padding: 10px;\n}",
      "defi": "Crée une mise en page à deux colonnes avec CSS Grid, en affichant différents blocs de contenu de manière alignée."
    },
    {
      "connaissance": "Les balises HTML sémantiques telles que <header>, <nav>, <article>, et <footer> améliorent la structure et l'accessibilité du contenu web.",
      "example": "<header>\n  <h1>Mon Blog</h1>\n</header>\n<article>\n  <h2>Premier article</h2>\n  <p>Contenu de l'article.</p>\n</article>\n<footer>\n  <p>&copy; 2024 Mon Blog</p>\n</footer>",
      "defi": "Crée une structure de page de blog en utilisant des balises sémantiques pour organiser le contenu."
    },
    {
      "connaissance": "L'utilisation des pseudo-éléments CSS comme ::before et ::after permet d'ajouter du contenu décoratif aux éléments sans modifier le HTML.",
      "example": "p::before {\n  content: '★ ';\n  color: gold;\n}\nli::after {\n  content: ' ✓';\n  color: green;\n}",
      "defi": "Utilise des pseudo-éléments pour ajouter des icônes avant et après certains éléments de texte sur une page web."
    },
    {
      "connaissance": "Le modèle mobile-first est une approche de conception où la mise en page est d'abord pensée pour les écrans mobiles avant d'être adaptée aux écrans plus grands.",
      "example": "@media (min-width: 768px) {\n  body {\n    font-size: 18px;\n  }\n}",
      "defi": "Crée une page web qui s'affiche différemment sur mobile et sur ordinateur en utilisant une approche mobile-first avec des media queries."
    }
  ]
}